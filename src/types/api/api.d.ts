/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/startup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Startup */
        get: operations["startup_startup_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Liveness */
        get: operations["liveness_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Readiness */
        get: operations["readiness_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/get_files_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Files List */
        get: operations["get_files_list_api_v1_get_files_list_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/get_configurations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Configurations */
        get: operations["get_configurations_api_v1_get_configurations_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/parse_project": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Parse Project */
        get: operations["parse_project_api_v1_parse_project_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/process_frames": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Process Frames */
        post: operations["process_frames_api_v1_process_frames_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/save_labels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Save Labels */
        post: operations["save_labels_api_v1_save_labels_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/delete_labels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Labels */
        delete: operations["delete_labels_api_v1_delete_labels_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** BoundingBoxItem */
        BoundingBoxItem: {
            /** Bbox */
            bbox: number[];
            /** Conf */
            conf?: number | null;
            /** Cls */
            cls?: number | null;
        };
        /** CameraData */
        CameraData: {
            /** Create Date */
            create_date?: string | null;
            /** Modify Date */
            modify_date?: string | null;
            /** Model */
            model?: string | null;
            /** Digital Zoom On */
            digital_zoom_on?: boolean | null;
            /** Digital Zoom */
            digital_zoom?: number | null;
            /** Spot Meter */
            spot_meter?: boolean | null;
            /** Protune */
            protune?: boolean | null;
            /** White Balance */
            white_balance?: string | null;
            /** Sharpness */
            sharpness?: string | null;
            /** Color Mode */
            color_mode?: string | null;
            /** Exposure Type */
            exposure_type?: string | null;
            /** Auto Iso Min */
            auto_iso_min?: number | null;
            /** Auto Iso Max */
            auto_iso_max?: number | null;
            /** Exposure Compensation */
            exposure_compensation?: number | null;
            /** Sensor Readout Time */
            sensor_readout_time?: number | null;
            /** Electronic Stabilization On */
            electronic_stabilization_on?: boolean | null;
            /** Electronic Image Stabilization */
            electronic_image_stabilization?: string | null;
            /** Diagonal Field Of View */
            diagonal_field_of_view?: number | null;
            /** Field Of View */
            field_of_view?: string | null;
            /** Aspect Ratio Warped */
            aspect_ratio_warped?: number | null;
            /** Aspect Ratio Unwarped */
            aspect_ratio_unwarped?: number | null;
            /** Compressor Name */
            compressor_name?: string | null;
        };
        /** FileInfo */
        FileInfo: {
            file_type: components["schemas"]["FileType"];
            /** Name */
            name: string;
            /** Relative Path */
            relative_path?: string | null;
            /** Size */
            size?: number | null;
            /** Last Modified */
            last_modified?: string | null;
            /** Content */
            content?: components["schemas"]["FileInfo"][] | null;
        };
        /**
         * FileType
         * @enum {string}
         */
        FileType: "project" | "video" | "image" | "folder" | "unsupported";
        /**
         * FunctionalClassType
         * @enum {string}
         */
        FunctionalClassType: "residential" | "collector" | "arterial" | "local" | "major_arterial" | "minor_arterial" | "major_collector" | "local_collector" | "residential_local" | "industrial" | "alley";
        /** GetConfigurationsResponse */
        GetConfigurationsResponse: {
            /** Processing Configurations */
            processing_configurations: {
                [key: string]: components["schemas"]["ProcessingConfiguration"];
            };
            /** Inference Model Ids */
            inference_model_ids: {
                [key: string]: string[];
            };
        };
        /** GpsPoint */
        GpsPoint: {
            /** Latitude */
            latitude: number;
            /** Longitude */
            longitude: number;
            /** Speed */
            speed: number;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** InferenceConfiguration */
        InferenceConfiguration: {
            /** Inference Model Id */
            inference_model_id: string;
            inference_model_parameters: components["schemas"]["InferenceModelParameters"];
        };
        /** InferenceModelParameters */
        InferenceModelParameters: {
            /** Confidence */
            confidence: number;
            /** Iou */
            iou: number;
        };
        /** InferenceResult */
        "InferenceResult-Input": {
            inference_type: components["schemas"]["InferenceType"];
            inference_source: components["schemas"]["InferenceSource"];
            /** Orig Shape */
            orig_shape: [
                number,
                number
            ];
            /** Names */
            names?: {
                [key: string]: string;
            } | null;
            /** Boxes */
            boxes?: components["schemas"]["BoundingBoxItem"][] | null;
            /** Masks */
            masks?: components["schemas"]["MaskItem"][] | null;
            /** Probs */
            probs?: number[] | null;
        };
        /** InferenceResult */
        "InferenceResult-Output": {
            inference_type: components["schemas"]["InferenceType"];
            inference_source: components["schemas"]["InferenceSource"];
            /** Orig Shape */
            orig_shape: [
                number,
                number
            ];
            /** Names */
            names?: {
                [key: string]: string;
            } | null;
            /** Boxes */
            boxes?: components["schemas"]["BoundingBoxItem"][] | null;
            /** Masks */
            masks?: components["schemas"]["MaskItem"][] | null;
            /** Probs */
            probs?: number[] | null;
        };
        /**
         * InferenceSource
         * @enum {string}
         */
        InferenceSource: "processing" | "cache" | "labelling";
        /**
         * InferenceType
         * @enum {string}
         */
        InferenceType: "road" | "distress" | "weathering" | "treatment" | "sign" | "marking";
        /** MaskItem */
        MaskItem: {
            bitmask: components["schemas"]["PngEncodedBitmask"];
            /** Area Pixels */
            area_pixels: number;
            /** Polygons Mask Shape */
            polygons_mask_shape?: [
                number,
                number
            ] | null;
            /** Polygons */
            polygons?: number[][][] | null;
        };
        /** MediaData */
        MediaData: {
            /** Url */
            url: string;
            /** Fps */
            fps: number;
            /** Frame Count */
            frame_count: number;
            /** Video Duration Seconds */
            video_duration_seconds: number;
            /** Frame Duration Seconds */
            frame_duration_seconds: number;
            /** Frame Width */
            frame_width: number;
            /** Frame Height */
            frame_height: number;
        };
        /** ParseProjectResponse */
        ParseProjectResponse: {
            /** Project Name */
            project_name: string;
            /** Project Items */
            project_items: components["schemas"]["ProjectItem"][];
        };
        /** PngEncodedBitmask */
        PngEncodedBitmask: {
            /** Shape */
            shape: number[];
            /** Data */
            data: string;
        };
        /** ProcessingConfiguration */
        ProcessingConfiguration: {
            /** Label */
            label: string;
            /** Inferences */
            inferences: {
                [key: string]: components["schemas"]["InferenceConfiguration"];
            };
            sampler_type: components["schemas"]["SamplerType"];
            /** Sampler Parameters */
            sampler_parameters: {
                [key: string]: number | null;
            };
        };
        /** ProcessingResults */
        "ProcessingResults-Input": {
            /** Inference Results */
            inference_results: {
                [key: string]: components["schemas"]["InferenceResult-Input"];
            };
            /** Pci Score */
            pci_score?: number | null;
        };
        /** ProcessingResults */
        "ProcessingResults-Output": {
            /** Inference Results */
            inference_results: {
                [key: string]: components["schemas"]["InferenceResult-Output"];
            };
            /** Pci Score */
            pci_score?: number | null;
        };
        /** ProjectItem */
        ProjectItem: {
            /** Video Url */
            video_url: string;
            /** Video Name */
            video_name: string;
            parsing_status: components["schemas"]["VideoParsingStatus"];
            road_data: components["schemas"]["RoadData"];
            camera_data?: components["schemas"]["CameraData"] | null;
            media_data?: components["schemas"]["MediaData"] | null;
            /** Gps Points */
            gps_points?: components["schemas"]["GpsPoint"][] | null;
            /** Pci Score Avg Human Inspector */
            pci_score_avg_human_inspector?: number | null;
            /** Pci Score Avg Human Qc */
            pci_score_avg_human_qc?: number | null;
            /** Pci Score Avg Ai */
            pci_score_avg_ai?: number | null;
        };
        /** RoadData */
        RoadData: {
            /** Road Name */
            road_name: string;
            /** Road Section */
            road_section: string;
            /** Road From */
            road_from: string;
            /** Road To */
            road_to: string;
            /** Road Length */
            road_length: number;
            /** Road Width */
            road_width: number;
            /** Road Area */
            road_area: number;
            road_functional_class: components["schemas"]["FunctionalClassType"];
            road_surface: components["schemas"]["SurfaceType"];
            /** Road Lanes */
            road_lanes: number;
            road_shoulder?: components["schemas"]["ShoulderType"];
        };
        /**
         * SamplerType
         * @enum {string}
         */
        SamplerType: "fpssampler" | "distancesampler";
        /**
         * ShoulderType
         * @enum {string}
         */
        ShoulderType: "none" | "cg" | "rol" | "curb" | "curb_and_gutter" | "crb" | "vg";
        /**
         * SurfaceType
         * @enum {string}
         */
        SurfaceType: "asphalt" | "concrete" | "gravel" | "dirt" | "pavement" | "other" | "brick";
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /**
         * VideoParsingStatus
         * @enum {string}
         */
        VideoParsingStatus: "downloading" | "parsing" | "download_error" | "parsing_error" | "ready";
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    startup_startup_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    liveness_status_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    readiness_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_files_list_api_v1_get_files_list_get: {
        parameters: {
            query?: {
                folder_relative_path?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileInfo"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_configurations_api_v1_get_configurations_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetConfigurationsResponse"];
                };
            };
        };
    };
    parse_project_api_v1_parse_project_get: {
        parameters: {
            query: {
                project_relative_path: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ParseProjectResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    process_frames_api_v1_process_frames_post: {
        parameters: {
            query: {
                video_url: string;
                frame_indexes: number[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: components["schemas"]["InferenceConfiguration"];
                };
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProcessingResults-Output"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    save_labels_api_v1_save_labels_post: {
        parameters: {
            query: {
                video_url: string;
                frame_index: number[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProcessingResults-Input"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_labels_api_v1_delete_labels_delete: {
        parameters: {
            query: {
                video_url: string;
                frame_index?: number[] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
